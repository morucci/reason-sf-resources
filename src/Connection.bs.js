// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Json = require("@glennsl/bs-json/src/Json.bs.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Json_decode = require("@glennsl/bs-json/src/Json_decode.bs.js");

var example = "\n{\n    \"pagure.io\": {\n        \"base-url\": \"https://pagure.io\",\n        \"type\": \"pagure\",\n        \"name\": \"pagure.io\"\n    }\n}\n\n";

function connection_type(param) {
  return Json_decode.field("type", Json_decode.string, param);
}

function name(param) {
  return Json_decode.field("name", Json_decode.string, param);
}

function base_url(param) {
  return Json_decode.optional((function (param) {
                return Json_decode.field("base-url", Json_decode.string, param);
              }), param);
}

function obj(param) {
  return Json_decode.dict(connection_type, param);
}

var CNXDecode = {
  connection_type: connection_type,
  name: name,
  base_url: base_url,
  obj: obj
};

function parseConnection(json) {
  var data = Json.parseOrRaise(json);
  var cnxdict = Json_decode.dict(connection_type, data);
  var cnxdictKey0 = Caml_array.caml_array_get(Object.keys(cnxdict), 0);
  return {
          name: Json_decode.at({
                  hd: cnxdictKey0,
                  tl: /* [] */0
                }, name)(data),
          connection_type: Json_decode.at({
                  hd: cnxdictKey0,
                  tl: /* [] */0
                }, connection_type)(data),
          base_url: Json_decode.at({
                  hd: cnxdictKey0,
                  tl: /* [] */0
                }, base_url)(data)
        };
}

function runExample(param) {
  return parseConnection(example);
}

exports.example = example;
exports.CNXDecode = CNXDecode;
exports.parseConnection = parseConnection;
exports.runExample = runExample;
/* No side effect */
