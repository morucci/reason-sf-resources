// Generated by BUCKLESCRIPT, PLEASE EDIT WITH CARE
'use strict';

var Json = require("@glennsl/bs-json/src/Json.bs.js");
var Caml_array = require("bs-platform/lib/js/caml_array.js");
var Json_decode = require("@glennsl/bs-json/src/Json_decode.bs.js");

var example = "\n{\n  \"contacts\": [\n    \"harrymichal@seznam.cz\"\n  ],\n  \"description\": \"Unprivileged development environment\",\n  \"tenant\": \"local\",\n  \"website\": \"https://github.com/debarshiray/toolbox\",\n  \"name\": \"toolbox\",\n  \"source-repositories\": [\n    {\n      \"containers/toolbox\": {\n        \"connection\": \"github.com\",\n        \"zuul/exclude-unprotected-branches\": true\n      }\n    }\n  ]\n}\n";

function connection(param) {
  return Json_decode.field("connection", Json_decode.string, param);
}

function tt(param) {
  return Json_decode.field("zuul/exclude-unprotected-branches", Json_decode.bool, param);
}

function obj(param) {
  return Json_decode.dict(connection, param);
}

var SRDecode = {
  connection: connection,
  tt: tt,
  obj: obj
};

function parseSourceRepositories(json) {
  var srdict = Json_decode.dict(connection, json);
  var srdictKey0 = Caml_array.caml_array_get(Object.keys(srdict), 0);
  var connection$1 = Json_decode.at({
          hd: srdictKey0,
          tl: /* [] */0
        }, connection)(json);
  var tt$1 = Json_decode.at({
          hd: srdictKey0,
          tl: /* [] */0
        }, tt)(json);
  return {
          name: srdictKey0,
          connection: connection$1,
          zuul_exclude_unprotected_branches: tt$1
        };
}

function parseProject(json) {
  var data = Json.parseOrRaise(json);
  return {
          contacts: Json_decode.field("contacts", (function (param) {
                  return Json_decode.list(Json_decode.string, param);
                }), data),
          description: Json_decode.field("description", Json_decode.string, data),
          tenant: Json_decode.field("tenant", Json_decode.string, data),
          website: Json_decode.field("website", Json_decode.string, data),
          name: Json_decode.field("name", Json_decode.string, data),
          issue_tracker_url: Json_decode.optional((function (param) {
                  return Json_decode.field("issue-tracker-url", Json_decode.string, param);
                }), data),
          source_repositories: Json_decode.field("source-repositories", (function (param) {
                  return Json_decode.array(parseSourceRepositories, param);
                }), data)
        };
}

function runExample(param) {
  return parseProject(example);
}

exports.example = example;
exports.SRDecode = SRDecode;
exports.parseSourceRepositories = parseSourceRepositories;
exports.parseProject = parseProject;
exports.runExample = runExample;
/* No side effect */
